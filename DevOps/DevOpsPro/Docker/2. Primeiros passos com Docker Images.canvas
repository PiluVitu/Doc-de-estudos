{
	"nodes":[
		{"id":"e867134c30a264e0","type":"group","x":-2440,"y":-2240,"width":3164,"height":1995,"label":"Introdução"},
		{"id":"89f890412778e7ea","type":"group","x":1080,"y":-2133,"width":1957,"height":730,"label":"Primeiros passos com docker image"},
		{"id":"7a3fa13248e442b6","type":"text","text":"# Overlay Fs\n\n- Uma imagem docker não consegue sobrescrever a si mesma, ela sempre vai salvar em uma nova camada, deixando as outras camadas como read only \n- Ex: Para usarmos a imagem do postgress alpine, foi necessário usar uma imagem base do alpine e fazer as alterações em cima dela. ","x":1083,"y":-2133,"width":480,"height":248},
		{"id":"48df6b3abb5d30f3","type":"text","text":"# Copy on Write\n\n- Devemos ficar atentos a esse comportamento do docker quando estivermos lidando com imagens, pois quando queremos modificar algo em um container, ele sempre vai criar uma copia do arquivos mudados em uma outra camada, deixando o 1 arquivo intacto.\n### Como isso afeta minha vida ?\n\n- Devemos focar em manipular os arquivos de maneira correta quando criamos nossas imagens a fim de otimizar esse espaço e tamanho","x":1140,"y":-1836,"width":423,"height":433},
		{"id":"5da4bc31359660d9","type":"text","text":"# Coletando informações sobre a imagem \n\n## Docker History \n- Quando uso esse comando, retorno todo o historico de imagens que foram usadas para criar essa imagem. \n\n## Docker Inspect \n- Quando uso esse comando na imagem, ele me retorna todas as informações daquela imagem, como containers que foram criados com ela, as imagens base que foram usadas na mesma, tipo de sistema operacional e muito mais ","x":2263,"y":-1934,"width":774,"height":361},
		{"id":"e8ae5fecf7f1fe12","type":"text","text":"# Docker Commit \n\n- Maneira antiga de criar imagens docker \n- Ele pega uma imagem base + camada de container, junta e transforma tudo em uma imagem. \n- ![](Pasted%20image%2020240607072401.png)","x":1659,"y":-2144,"width":558,"height":419},
		{"id":"73e6688ea780f02d","type":"text","text":"# Principais comandos para imagens Docker\n- `docker commit`\n- `docker build`\n- `docker image ls`\n- `docker image rm`\n- `docker image prune`","x":3037,"y":-192,"width":620,"height":225},
		{"id":"94c2c42c6c179f39","type":"text","text":"# CMD x ENTRYPOINT\n![](Pasted%20image%2020240607155528.png)\n[Referência](https://docs.docker.com/reference/dockerfile/#understand-how-cmd-and-entrypoint-interact)","x":3037,"y":-1106,"width":726,"height":839},
		{"id":"fbc37120db56a317","type":"text","text":"# EXPOSE\n\n- É um metadado da imagem que é responsavel por documentar qual porta aquela aplicação esta expondo. \n- ![Container expondo a porta e sem expor a porta, respectivamente](Pasted%20image%2020240607153326.png)\n- Podemos usar essa informação para expor a porta correta na hora de buildar o container, ou podemos ainda usar a flag *`-P`* iremos expor a porta documentada para alguma porta da nossa maquina","x":1938,"y":-80,"width":800,"height":380},
		{"id":"865d911d8b029fdd","type":"text","text":"# Executando comandos na hora que startar o seu container Docker\n\n- Após usar o script base para instanciar um container, podemos passar um script que eu quero que ele execute no começo da aplicação seguindo exemplo abaixo:\n```bash\ndocker container run -d <imagem> <Script>\n\ndocker container run -d appNodeJs node /app/index.js\n```","x":1659,"y":-1718,"width":558,"height":315},
		{"id":"c9b30864ebc3b362","type":"text","text":"# Dockerfile \n\n- É um arquivo texto com todas as intruções base para construir a imagem \n## Opções\n![](Pasted%20image%2020240607092617.png)","x":1325,"y":-1074,"width":1438,"height":774},
		{"id":"186aa2fc33a35a16","type":"text","text":"# USER\n- É onde definimos qual usuário será usado a partir de onde ele é declarado \n- O usuário deve ser criado antes de ser usado\n- ![](Pasted%20image%2020240607154047.png)\n- Tomando com base a imagem acima é importante definirmos o user no final do nosso processo de build, para não termos problemas na hora de instalar dependências\n- Podemos usar o COPY com algumas opções de usuário e permissão para atribuir o arquivo ao usuário correto:\n- ![](Pasted%20image%2020240607154425.png)","x":992,"y":-220,"width":719,"height":436},
		{"id":"2af6b2a668da8b3b","type":"file","file":"DevOps/DevOpsPro/Docker/assets/Pasted image 20240606231815.png","x":-880,"y":-2040,"width":1369,"height":680},
		{"id":"6e67411f44f7ba2f","type":"file","file":"DevOps/DevOpsPro/Docker/assets/Pasted image 20240606231442.png","x":-720,"y":-1106,"width":1118,"height":640},
		{"id":"b4484b451ec68037","type":"text","text":"# ATENÇÃO \n\n## **Nunca** escrevemos em uma camada q passou, sempre criamos outra camada para inserir outras coisas a mais ","x":-161,"y":-2240,"width":885,"height":138},
		{"id":"c20a6607079bc930","type":"text","text":" #  Containers e Imagens \n\n ## O Container não é a imagem em si, por isso o mesmo tem uma natureza efemera. \n\n## Também é por conta disso que conseguimos criar vários containers referenciando uma mesma imagem.","x":-1600,"y":-480,"width":802,"height":235},
		{"id":"8c355dbfbb466731","type":"file","file":"DevOps/DevOpsPro/Docker/assets/Pasted image 20240606232139.png","x":-2440,"y":-1560,"width":1480,"height":774}
	],
	"edges":[
		{"id":"4d3232421fced0e5","fromNode":"6e67411f44f7ba2f","fromSide":"top","toNode":"2af6b2a668da8b3b","toSide":"bottom"},
		{"id":"965827f6582e19dc","fromNode":"2af6b2a668da8b3b","fromSide":"top","toNode":"b4484b451ec68037","toSide":"left"},
		{"id":"bb726b3a89e6ba87","fromNode":"2af6b2a668da8b3b","fromSide":"left","toNode":"8c355dbfbb466731","toSide":"right"},
		{"id":"4a17a3bc38ac23da","fromNode":"8c355dbfbb466731","fromSide":"bottom","toNode":"c20a6607079bc930","toSide":"top"},
		{"id":"c40b15249dc3b754","fromNode":"c20a6607079bc930","fromSide":"right","toNode":"6e67411f44f7ba2f","toSide":"bottom"},
		{"id":"a014bbae8de7fd5a","fromNode":"e867134c30a264e0","fromSide":"right","toNode":"89f890412778e7ea","toSide":"left"},
		{"id":"c106a94706eec8b0","fromNode":"c9b30864ebc3b362","fromSide":"bottom","toNode":"fbc37120db56a317","toSide":"top"},
		{"id":"2d9e835061a92489","fromNode":"c9b30864ebc3b362","fromSide":"bottom","toNode":"186aa2fc33a35a16","toSide":"top"},
		{"id":"767ceab29358ad75","fromNode":"c9b30864ebc3b362","fromSide":"right","toNode":"94c2c42c6c179f39","toSide":"left"},
		{"id":"3385fdaea8d0b507","fromNode":"c9b30864ebc3b362","fromSide":"right","toNode":"73e6688ea780f02d","toSide":"left"}
	]
}