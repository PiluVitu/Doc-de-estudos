{
	"nodes":[
		{"id":"a9bd01dfb4f5e95e","type":"text","text":"# Network\n\nÉ uma forma de interligarmos containers em uma só rede para conseguirmos acessar varios serviços em uma mesma rede, pois a natureza padrão de um container é isolamento total \n\n## Componentes\n\n### Container network model\n- Definição de como trabalhar com redes no docker\n### Lib network \n[GitHub - moby/libnetwork: networking for containers](https://github.com/moby/libnetwork)\n https://github.com/moby/libnetwork/blob/master/docs/design.md\n- Implementação desse modelo\n\n## Tipos de Network\n\n- Bridge\n- None\n- Host\n-  MacVLAN\n-  Overlay \n\n## Comandos\n\n```bash\n# Para Criar uma REDE\n\ndocker network create <nome da rede>\n\n# Para conectar um container ja instanciado e criado na minha rede \n\ndocker network connect <nome da rede>\n\n# Para desconectar a rede de algum container que já existe \n\ndocker network disconnect <nome da rede>\n```","x":-200,"y":-320,"width":626,"height":1091},
		{"id":"d4f9b2a4c0848dca","x":480,"y":-940,"width":686,"height":391,"type":"text","text":"# Bridge\nConexão padrão, usada para conectar varios containers na mesma rede. \n\n## **ATENÇÃOOO**\n**Não se deve trabalhar com ip e container**\n\n## [Mudando config da rede bridge default](https://docs.docker.com/network/drivers/bridge/#use-the-default-bridge-network)\n\n"},
		{"id":"1a84e33baed2d2bd","x":1340,"y":-460,"width":632,"height":368,"type":"text","text":"### None\nOnde o container não tem nenhuma conexão de rede\n"},
		{"id":"3235cb18561bc6df","x":1480,"y":640,"width":680,"height":260,"type":"text","text":"### MacVLAN\nConectamos o container a uma rede fisica "},
		{"id":"df7e3192681b1404","x":1440,"y":120,"width":640,"height":354,"type":"text","text":"### Overlay \nUtilizado muitas vezes para conectar varias maquinas onde o container D está rodando, muito usado tambem quando estamos falando de docker swarm"},
		{"id":"7367138c2ccf8c15","x":560,"y":770,"width":709,"height":292,"type":"text","text":"### Host\nConecto o meu container ao mesmo dispositivo de rede do meu computador, é possivel acessar ele da minha rede "},
		{"id":"8afc35edbc812afc","x":-1360,"y":632,"width":1060,"height":2298,"type":"text","text":"# SubNets e docker\n\nNo Docker, quando você cria uma network personalizada, pode definir manualmente a **subnet** que ela vai usar. Isso é útil para evitar conflitos com outras redes que possam estar rodando na sua máquina, como a rede do host ou outras redes de containers. Vou te explicar o conceito de **subnet** e como isso se aplica ao Docker e à sua máquina.\n\n### O que é uma Subnet?\n\nA subnet é uma subdivisão de uma rede maior, com o objetivo de separar e organizar diferentes dispositivos e recursos. Quando você define uma subnet, está especificando um intervalo de endereços IP que podem ser atribuídos a dispositivos (neste caso, containers).\n\nPor exemplo, a subnet `192.168.1.0/24` significa que a rede vai usar endereços IP de `192.168.1.1` até `192.168.1.254`, com `192.168.1.0` sendo o endereço da rede e `192.168.1.255` sendo o endereço de broadcast.\n\n### Por que definir a Subnet manualmente no Docker?\n\nImagine que você já tem uma rede na sua máquina, seja da sua própria conexão de internet (como o Wi-Fi), VPN ou outra rede configurada, que usa o intervalo de IPs `192.168.1.0/24`. Se você criar uma rede Docker que acidentalmente usa o mesmo intervalo de IP, pode haver conflitos. Por exemplo, seu container pode tentar acessar um endereço que já está sendo usado pelo seu roteador ou outro dispositivo na rede.\n\n### Cenário: Como ter uma Subnet na sua máquina?\n\nExistem algumas situações comuns onde sua máquina pode já ter subnets alocadas:\n\n1. **Rede Local (Wi-Fi/LAN)**: Sua rede doméstica provavelmente já tem uma subnet, como `192.168.0.0/24` ou `192.168.1.0/24`, configurada pelo roteador.\n   \n2. **VPN**: Se você usa uma VPN, ela cria uma subnet privada para rotear o tráfego. Isso pode ser algo como `10.8.0.0/16`.\n\n3. **Serviços de Virtualização**: Softwares como VMWare, VirtualBox ou até o WSL2 (Windows Subsystem for Linux) podem criar subnets próprias para suas redes virtuais.\n\n4. **Outras Docker Networks**: Se você já tem várias networks no Docker, o próprio Docker atribui subnets automaticamente, e isso pode resultar em conflitos com a rede do host ou outras networks se não houver controle.\n\n### Como definir a Subnet manualmente no Docker?\n\nPara evitar esses conflitos, você pode criar uma rede Docker definindo a subnet manualmente. Isso garante que a rede dos containers não vai interferir na sua rede local ou outros serviços.\n\nExemplo de criação de uma Docker Network com uma subnet definida:\n\n```bash\ndocker network create \\\n  --subnet=172.20.0.0/16 \\\n  my_custom_network\n```\n\nNeste exemplo, estou criando uma rede chamada `my_custom_network` com a subnet `172.20.0.0/16`. Isso significa que os containers nessa rede vão ter IPs no intervalo de `172.20.0.1` até `172.20.255.254`, evitando qualquer conflito com a rede local ou outras subnets.\n\n### Passos para evitar conflitos:\n\n1. **Identificar subnets existentes**: Verifique as redes que já estão em uso na sua máquina com o comando:\n   ```bash\n   ip addr\n   ```\n   Isso te mostrará as interfaces de rede e as subnets associadas.\n\n2. **Verificar Docker networks existentes**: Veja quais redes Docker já estão criadas e suas subnets com:\n   ```bash\n   docker network ls\n   docker network inspect [network-name]\n   ```\n\n3. **Escolher uma subnet diferente**: Certifique-se de que a subnet que você está definindo para a nova rede Docker não se sobrepõe a subnets já em uso.\n\n### Por que usar subnets diferentes?\n\n- **Evitar Conflitos de IP**: Como mencionado antes, se dois sistemas tentarem usar o mesmo IP, você terá problemas de conexão. Ao isolar a rede dos containers com uma subnet separada, você garante que não haverá colisões.\n  \n- **Facilidade de Rotas**: Quando você usa subnets diferentes, fica mais fácil para o Docker (e para o sistema host) rotear o tráfego corretamente entre diferentes redes, especialmente quando você precisa de comunicação entre containers, hosts e outros serviços.\n\n- **Organização de Serviços**: Em ambientes de produção, pode ser interessante organizar diferentes grupos de containers em subnets específicas, ajudando a gerenciar acesso e segurança entre diferentes partes da sua aplicação.\n\n### Resumo Visual\n\n| Termo               | Descrição                                                                                        |\n|---------------------|--------------------------------------------------------------------------------------------------|\n| **Subnet**          | Intervalo de endereços IP dentro de uma rede. Ex: `192.168.1.0/24`.                               |\n| **Rede Local**      | Subnet usada pela sua máquina para se comunicar com a internet e outros dispositivos.             |\n| **VPN**             | Cria sua própria subnet para rotear o tráfego de rede.                                            |\n| **Docker Network**  | Redes virtuais criadas para containers. Pode-se definir a subnet manualmente para evitar conflitos.|\n| **Comando Docker**  | `docker network create --subnet=<subnet> <network_name>` para criar uma rede com subnet customizada.|\n\n### Referências\n\n- [Documentação Docker sobre Networking](https://docs.docker.com/network/)\n- [O que é Subnet](https://www.cisco.com/c/en/us/products/security/what-is-a-subnet.html)"}
	],
	"edges":[
		{"id":"21a34a733012b009","fromNode":"a9bd01dfb4f5e95e","fromSide":"top","toNode":"d4f9b2a4c0848dca","toSide":"left"},
		{"id":"78b817d0dec4839c","fromNode":"a9bd01dfb4f5e95e","fromSide":"right","toNode":"1a84e33baed2d2bd","toSide":"left"},
		{"id":"37c5f1377bf19ebd","fromNode":"a9bd01dfb4f5e95e","fromSide":"bottom","toNode":"7367138c2ccf8c15","toSide":"left"},
		{"id":"e9f789f2816efb46","fromNode":"a9bd01dfb4f5e95e","fromSide":"right","toNode":"3235cb18561bc6df","toSide":"left"},
		{"id":"4deab50df2dda5ba","fromNode":"a9bd01dfb4f5e95e","fromSide":"right","toNode":"df7e3192681b1404","toSide":"left"},
		{"id":"e77a39567764421e","fromNode":"a9bd01dfb4f5e95e","fromSide":"bottom","toNode":"8afc35edbc812afc","toSide":"top"}
	]
}